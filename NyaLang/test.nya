
info {
	Title = "NyaTest";
	Product = "NyaTest";
	Description = "Test output for the Nya compiler";
	Copyright = "Copyright © Amy Nagle 2018";
	Company = "Muffin Tech";
	Version = "0.2.0.0";
	FileVersion = "0.2.0.2";
	InformationalVersion = "0.2b";
}

@public
interface Dog {
	int DoThing();
}

class Animal {

	@public
	New() {

	}

	New!() {

	}

	@public @virtual
	Foo() {

	}

	@public
	Bar() {

	}
}

class CatDog << Cat, Dog {

	@public
	int DoThing() {
		q = /a[^6q]cf?/ix;
		return 10;
	}

	TestNew() {
		c = new Cat();
		c.ConvertDec(12);
	}
}

@public
class Cat << Animal {

	@public
	New() {
		w = nil;
	}

	@public
	New!() {
		a = 12 ?? 4;
	}

    @public
	decimal SetCall!(string[] args) {
        a = 12;
        b = log(10 + a * 35 + (5.4 - 7.4));
        c = 13e-3m;
        return a + c;
    }

    @public
	SetCall1!(string[] args) {
        a = 12;
        b = log(10 + a * 35 + (7.4));
    }

	@public
	decimal ConvertDec(int i) {
		return i + 13e-3m;
	}

	ShiftDec(decimal d) {
		q = 10e-1m;
		q += d;
	}

	@override
	Foo(string message, string s1 = "bacon", string s2?) {
		s1 ?= "waffle";
		s = 0;
		s ?= 12;
		t = nil ?? "herp";
	}

	DoCall() {
		q = new Dictionary<string, int>();
		TestByte();
	}

	byte TestByte() {
		return 4b;
	}
}

@entry
Main!() {
	print("\\\a\b\'\"\0\f \t\v");
	print("Hello\x1\x12\x123\x1234");
}